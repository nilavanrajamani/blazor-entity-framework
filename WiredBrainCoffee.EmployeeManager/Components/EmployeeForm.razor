@if (Employee is not null)
{
    <EditForm Model="Employee" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group accordion-body">
            <label for="FirstName">First Name</label>
            <InputText id="FirstName" class="form-control" @bind-Value="Employee.FirstName" />
        </div>
        <div class="form-group accordion-body">
            <label for="LastName">Last Name</label>
            <InputText id="LastName" class="form-control" @bind-Value="Employee.LastName" />
        </div>
        <div class="form-group accordion-body">
            <label for="IsDeveloper">Is Developer</label>
            <InputCheckbox id="IsDeveloper" class="form-check-input" @bind-Value="Employee.IsDeveloper" />
        </div>
        <div class="form-group accordion-body">
            <label for="Department">Department</label>
            <InputSelect id="Department" class="form-select" @bind-Value="Employee.DepartmentId">
                <option value="">Select Department</option>
                @foreach (var department in Departments)
                {
                    <option value="@department.Id">@department.Name</option>
                }
            </InputSelect>
        </div>
        @if (isEdit)
        {
            <button type="submit" class="btn btn-primary">Update</button>
            <button type="button" class="btn btn-secondary">Cancel</button>
        }
        else{
            <button type="submit" class="btn btn-primary">Add</button>
        }        
    </EditForm>
}

@code {
    [Parameter]
    public Employee? Employee { get; set; }

    [Parameter]
    public List<Department> Departments { get; set; } = new List<Department>();

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public bool isEdit { get; set; } = false;

    private async Task OnValidSubmit()
    {
        await OnSubmit.InvokeAsync(true);
    }

    private async Task OnInvalidSubmit()
    {
        await OnSubmit.InvokeAsync(false);
    }
}