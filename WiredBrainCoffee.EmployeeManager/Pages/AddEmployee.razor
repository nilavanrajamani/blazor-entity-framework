@page "/employees/add"
@inject IDbContextFactory<EmployeeManagerDbContext> DbContextFactory

<PageTitle>Add Employee</PageTitle>

<h1>Add Employee</h1>

@if (SuccessMessage is not null)
{
    <br />
    <div class="alert alert-success" role="alert">
        @SuccessMessage
    </div>
}

@if (ErrorMessage is not null)
{
    <br />
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<EmployeeForm Departments="Departments" Employee="Employee" OnSubmit="SaveEmployee"></EmployeeForm>

@code {
    public Employee? Employee { get; set; }
    private List<Department> Departments = new List<Department>();
    private string? SuccessMessage { get; set; }
    private string? ErrorMessage { get; set; }


    protected override async Task OnInitializedAsync()
    {
        using (EmployeeManagerDbContext context = DbContextFactory.CreateDbContext())
        {
            Departments = await context.Departments.OrderBy(d => d.Name).ToListAsync();
        }
        Employee = new Employee() { DepartmentId = Departments.FirstOrDefault()?.Id };
    }

    private async Task HandleSubmit(bool isValid)
    {
        if (isValid)
        {
            await SaveEmployee();
        }
        else
        {
            ShowErrors();
        }
    }

    private async Task SaveEmployee()
    {
        try
        {
            using (EmployeeManagerDbContext context = DbContextFactory.CreateDbContext())
            {
                context.Employees.Add(Employee!);
                await context.SaveChangesAsync();

                SuccessMessage = "Employee saved successfully";
                ErrorMessage = null;
            }

            Employee = new Employee();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
            SuccessMessage = null;
            ErrorMessage = "An error occurred while saving the employee";
        }
    }

    private void ShowErrors()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }
}