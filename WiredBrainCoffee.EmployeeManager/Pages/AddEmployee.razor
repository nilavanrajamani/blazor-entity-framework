@page "/employees/add"
@inject IDbContextFactory<EmployeeManagerDbContext> DbContextFactory

<PageTitle>Add Employee</PageTitle>

<h1>Add Employee</h1>

@if (Employee is not null)
{
    <EditForm Model="Employee">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group accordion-body">
            <label for="FirstName">First Name</label>
            <InputText id="FirstName" class="form-control" @bind-Value="Employee.FirstName" />
        </div>
        <div class="form-group accordion-body">
            <label for="LastName">Last Name</label>
            <InputText id="LastName" class="form-control" @bind-Value="Employee.LastName" />
        </div>
        <div class="form-group accordion-body">
            <label for="IsDeveloper">Is Developer</label>
            <InputCheckbox id="IsDeveloper" class="form-check-input" @bind-Value="Employee.IsDeveloper" />
        </div>
        <div class="form-group accordion-body">
            <label for="Department">Department</label>
            <InputSelect id="Department" class="form-select" @bind-Value="Employee.DepartmentId">
                <option value="">Select Department</option>
                @foreach (var department in Departments)
                {
                    <option value="@department.Id">@department.Name</option>
                }
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    public Employee? Employee { get; set; }
    private List<Department> Departments = new List<Department>();


    protected override async Task OnInitializedAsync()
    {
        using (EmployeeManagerDbContext context = DbContextFactory.CreateDbContext())
        {
            Departments = await context.Departments.OrderBy(d => d.Name).ToListAsync();
        }
        Employee = new Employee() { DepartmentId = Departments.FirstOrDefault()?.Id };
    }
}